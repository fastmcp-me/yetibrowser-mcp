{"version":3,"sources":["../../shared/src/popup/index.ts"],"sourcesContent":["const statusEl = document.getElementById(\"status\") as HTMLDivElement;\nconst connectedTabEl = document.getElementById(\"connected-tab\") as HTMLElement;\nconst serverStatusEl = document.getElementById(\"server-status\") as HTMLElement;\nconst tabInfoContainer = document.getElementById(\"tab-info\") as HTMLDivElement;\nconst nameEl = document.getElementById(\"tab-name\") as HTMLSpanElement;\nconst urlEl = document.getElementById(\"tab-url\") as HTMLAnchorElement;\nconst goToTabButton = document.getElementById(\"go-to-tab\") as HTMLButtonElement;\nconst iconEl = document.getElementById(\"header-icon\") as HTMLImageElement;\nconst connectButton = document.getElementById(\"connect\") as HTMLButtonElement;\nconst disconnectButton = document.getElementById(\"disconnect\") as HTMLButtonElement;\nconst portModeSelect = document.getElementById(\"port-mode\") as HTMLSelectElement;\nconst manualPortGroup = document.getElementById(\"port-manual-group\") as HTMLDivElement;\nconst portSelect = document.getElementById(\"port-select\") as HTMLSelectElement;\nconst applyPortButton = document.getElementById(\"apply-port\") as HTMLButtonElement;\nconst applyTextEl = document.getElementById(\"apply-text\") as HTMLSpanElement;\nconst applySpinnerEl = document.getElementById(\"apply-spinner\") as HTMLSpanElement;\n\nconsole.log(\"YetiBrowser popup loaded - NEW VERSION WITH PORT SELECT\", { portSelect, applyTextEl, applySpinnerEl });\n\nlet lastError: string | null = null;\n\nconnectButton.addEventListener(\"click\", async () => {\n  lastError = null;\n  try {\n    const activeTab = await getActiveTab();\n    if (!activeTab || activeTab.id === undefined) {\n      throw new Error(\"Unable to determine active tab\");\n    }\n\n    if (!isUrlAllowed(activeTab.url ?? \"\")) {\n      throw new Error(\"This page cannot be controlled. Switch to an http(s) tab and try again.\");\n    }\n\n    await chrome.runtime.sendMessage({ type: \"yetibrowser/connect\", tabId: activeTab.id });\n  } catch (error) {\n    lastError = error instanceof Error ? error.message : String(error);\n  } finally {\n    await refresh();\n  }\n});\n\ndisconnectButton.addEventListener(\"click\", async () => {\n  lastError = null;\n  try {\n    await chrome.runtime.sendMessage({ type: \"yetibrowser/disconnect\" });\n  } catch (error) {\n    lastError = error instanceof Error ? error.message : String(error);\n  } finally {\n    await refresh();\n  }\n});\n\nportModeSelect.addEventListener(\"change\", async () => {\n  const mode = portModeSelect.value === \"manual\" ? \"manual\" : \"auto\";\n  if (mode === \"auto\") {\n    manualPortGroup.hidden = true;\n    portSelect.disabled = true;\n    applyPortButton.disabled = true;\n    await applyPortConfiguration(mode);\n  } else {\n    manualPortGroup.hidden = false;\n    portSelect.disabled = false;\n    applyPortButton.disabled = false;\n    portSelect.focus();\n  }\n});\n\napplyPortButton.addEventListener(\"click\", async () => {\n  const portValue = Number.parseInt(portSelect.value, 10);\n  if (!Number.isInteger(portValue) || portValue <= 0 || portValue > 65535) {\n    lastError = \"Invalid port selected\";\n    await refresh();\n    return;\n  }\n  await applyPortConfiguration(\"manual\", portValue);\n});\n\nvoid refresh();\n\nasync function refresh() {\n  const state = await chrome.runtime.sendMessage({ type: \"yetibrowser/getState\" });\n  const activeTab = await getActiveTab();\n  const connectedTab = state?.tabId\n    ? await chrome.tabs\n        .get(state.tabId)\n        .catch(() => undefined)\n    : undefined;\n\n  updateUi(state, activeTab, connectedTab);\n}\n\nfunction updateUi(\n  state: {\n    tabId: number | null;\n    socketConnected: boolean;\n    wsPort: number;\n    portMode: PortMode;\n    socketStatus?: SocketStatus;\n  },\n  activeTab: chrome.tabs.Tab | undefined,\n  connectedTab: chrome.tabs.Tab | undefined,\n) {\n  const { tabId, socketConnected, wsPort, portMode, socketStatus = \"disconnected\" } = state;\n\n  const activeTabId = activeTab?.id ?? null;\n  const isConnectedToActive = tabId !== null && tabId === activeTabId;\n\n  connectButton.disabled = !activeTabId || isConnectedToActive || !isUrlAllowed(activeTab?.url ?? \"\");\n  disconnectButton.disabled = tabId === null;\n  goToTabButton.disabled = tabId === null;\n\n  portModeSelect.value = portMode;\n  manualPortGroup.hidden = portMode !== \"manual\";\n  portSelect.disabled = portMode !== \"manual\";\n  const isConnectingSocket = socketStatus === \"connecting\";\n  applyPortButton.disabled = portMode !== \"manual\";\n  portSelect.value = String(wsPort);\n\n  if (tabId && connectedTab) {\n    const suffix = isConnectedToActive ? \" (current)\" : \"\";\n    connectedTabEl.textContent = `#${tabId}${suffix}`;\n    connectedTabEl.classList.remove(\"error\");\n  } else {\n    connectedTabEl.textContent = \"None\";\n    connectedTabEl.classList.add(\"error\");\n  }\n\n  const modeLabel = portMode === \"auto\" ? \"auto\" : \"manual\";\n  if (socketStatus === \"connecting\") {\n    serverStatusEl.textContent = `ws://localhost:${wsPort} (${modeLabel}) — connecting…`;\n    serverStatusEl.classList.add(\"error\");\n  } else if (socketConnected) {\n    serverStatusEl.textContent = `ws://localhost:${wsPort} (${modeLabel})`;\n    serverStatusEl.classList.remove(\"error\");\n  } else {\n    serverStatusEl.textContent = `ws://localhost:${wsPort} (${modeLabel}) — not connected`;\n    serverStatusEl.classList.add(\"error\");\n  }\n\n  statusEl.classList.remove(\"error\");\n  if (lastError) {\n    statusEl.textContent = lastError;\n    statusEl.classList.add(\"error\");\n  } else if (socketStatus === \"connecting\") {\n    statusEl.textContent = `Connecting to ws://localhost:${wsPort}…`;\n  } else if (tabId && !isConnectedToActive) {\n    statusEl.textContent = \"We’ll interact with this tab even if another is focused.\";\n  } else {\n    statusEl.textContent = tabId ? \"Connected\" : \"Not connected\";\n    if (!tabId) {\n      statusEl.classList.add(\"error\");\n    }\n  }\n\n  if (connectedTab) {\n    tabInfoContainer.hidden = false;\n    nameEl.textContent = truncate(connectedTab.title ?? \"Untitled\");\n    const href = connectedTab.url ?? \"\";\n    if (href) {\n      urlEl.textContent = truncate(href, 60);\n      urlEl.href = href;\n      urlEl.hidden = false;\n    } else {\n      urlEl.textContent = \"\";\n      urlEl.removeAttribute(\"href\");\n      urlEl.hidden = true;\n    }\n  } else {\n    tabInfoContainer.hidden = true;\n    nameEl.textContent = \"\";\n    urlEl.textContent = \"\";\n    urlEl.removeAttribute(\"href\");\n    urlEl.hidden = true;\n  }\n\n  iconEl.hidden = false;\n}\n\nasync function getActiveTab(): Promise<chrome.tabs.Tab | undefined> {\n  const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n  return tabs[0];\n}\n\nasync function applyPortConfiguration(mode: PortMode, port?: number): Promise<void> {\n  lastError = null;\n  showSpinner(true);\n  try {\n    const response = await chrome.runtime.sendMessage({\n      type: \"yetibrowser/setPortConfig\",\n      mode,\n      port,\n    });\n    if (!response?.ok) {\n      throw new Error(response?.error ?? \"Failed to update port configuration\");\n    }\n    await waitForSocketConnection();\n  } catch (error) {\n    lastError = error instanceof Error ? error.message : String(error);\n  } finally {\n    showSpinner(false);\n    await refresh();\n  }\n}\n\nasync function waitForSocketConnection(maxWaitMs = 5000): Promise<void> {\n  const start = Date.now();\n  let checkCount = 0;\n  while (Date.now() - start < maxWaitMs) {\n    const state = await chrome.runtime.sendMessage({ type: \"yetibrowser/getState\" });\n    const activeTab = await getActiveTab();\n    const connectedTab = state?.tabId\n      ? await chrome.tabs\n          .get(state.tabId)\n          .catch(() => undefined)\n      : undefined;\n    if (state) {\n      updateUi(state, activeTab, connectedTab);\n    }\n    if (state?.socketConnected && state?.socketStatus === \"open\") {\n      return;\n    }\n    // Start with very fast checks, gradually slow down\n    const delayMs = checkCount < 10 ? 50 : checkCount < 20 ? 100 : 200;\n    checkCount++;\n    await delay(delayMs);\n  }\n}\n\ngoToTabButton.addEventListener(\"click\", async () => {\n  const state = await chrome.runtime.sendMessage({ type: \"yetibrowser/getState\" });\n  if (!state?.tabId) {\n    return;\n  }\n  try {\n    await chrome.tabs.update(state.tabId, { active: true });\n    const tab = await chrome.tabs.get(state.tabId);\n    if (tab.windowId !== undefined) {\n      await chrome.windows.update(tab.windowId, { focused: true });\n    }\n  } catch (error) {\n    lastError = error instanceof Error ? error.message : String(error);\n    await refresh();\n  }\n});\n\nfunction isUrlAllowed(url: string): boolean {\n  if (!url) {\n    return false;\n  }\n  if (url.startsWith(\"chrome://\") || url.startsWith(\"chrome-extension://\")) {\n    return false;\n  }\n  if (url.startsWith(\"edge://\") || url.startsWith(\"about:\")) {\n    return false;\n  }\n  return true;\n}\n\ntype PortMode = \"auto\" | \"manual\";\ntype SocketStatus = \"disconnected\" | \"connecting\" | \"open\";\n\nfunction truncate(value: string, max = 40): string {\n  if (value.length <= max) {\n    return value;\n  }\n  return `${value.slice(0, max - 1)}…`;\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}\n\nfunction showSpinner(show: boolean): void {\n  if (show) {\n    applyTextEl.hidden = true;\n    applySpinnerEl.hidden = false;\n    applyPortButton.disabled = true;\n  } else {\n    applyTextEl.hidden = false;\n    applySpinnerEl.hidden = true;\n    applyPortButton.disabled = false;\n  }\n}\n"],"mappings":";AAAA,IAAM,WAAW,SAAS,eAAe,QAAQ;AACjD,IAAM,iBAAiB,SAAS,eAAe,eAAe;AAC9D,IAAM,iBAAiB,SAAS,eAAe,eAAe;AAC9D,IAAM,mBAAmB,SAAS,eAAe,UAAU;AAC3D,IAAM,SAAS,SAAS,eAAe,UAAU;AACjD,IAAM,QAAQ,SAAS,eAAe,SAAS;AAC/C,IAAM,gBAAgB,SAAS,eAAe,WAAW;AACzD,IAAM,SAAS,SAAS,eAAe,aAAa;AACpD,IAAM,gBAAgB,SAAS,eAAe,SAAS;AACvD,IAAM,mBAAmB,SAAS,eAAe,YAAY;AAC7D,IAAM,iBAAiB,SAAS,eAAe,WAAW;AAC1D,IAAM,kBAAkB,SAAS,eAAe,mBAAmB;AACnE,IAAM,aAAa,SAAS,eAAe,aAAa;AACxD,IAAM,kBAAkB,SAAS,eAAe,YAAY;AAC5D,IAAM,cAAc,SAAS,eAAe,YAAY;AACxD,IAAM,iBAAiB,SAAS,eAAe,eAAe;AAE9D,QAAQ,IAAI,2DAA2D,EAAE,YAAY,aAAa,eAAe,CAAC;AAElH,IAAI,YAA2B;AAE/B,cAAc,iBAAiB,SAAS,YAAY;AAClD,cAAY;AACZ,MAAI;AACF,UAAM,YAAY,MAAM,aAAa;AACrC,QAAI,CAAC,aAAa,UAAU,OAAO,QAAW;AAC5C,YAAM,IAAI,MAAM,gCAAgC;AAAA,IAClD;AAEA,QAAI,CAAC,aAAa,UAAU,OAAO,EAAE,GAAG;AACtC,YAAM,IAAI,MAAM,yEAAyE;AAAA,IAC3F;AAEA,UAAM,OAAO,QAAQ,YAAY,EAAE,MAAM,uBAAuB,OAAO,UAAU,GAAG,CAAC;AAAA,EACvF,SAAS,OAAO;AACd,gBAAY,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAAA,EACnE,UAAE;AACA,UAAM,QAAQ;AAAA,EAChB;AACF,CAAC;AAED,iBAAiB,iBAAiB,SAAS,YAAY;AACrD,cAAY;AACZ,MAAI;AACF,UAAM,OAAO,QAAQ,YAAY,EAAE,MAAM,yBAAyB,CAAC;AAAA,EACrE,SAAS,OAAO;AACd,gBAAY,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAAA,EACnE,UAAE;AACA,UAAM,QAAQ;AAAA,EAChB;AACF,CAAC;AAED,eAAe,iBAAiB,UAAU,YAAY;AACpD,QAAM,OAAO,eAAe,UAAU,WAAW,WAAW;AAC5D,MAAI,SAAS,QAAQ;AACnB,oBAAgB,SAAS;AACzB,eAAW,WAAW;AACtB,oBAAgB,WAAW;AAC3B,UAAM,uBAAuB,IAAI;AAAA,EACnC,OAAO;AACL,oBAAgB,SAAS;AACzB,eAAW,WAAW;AACtB,oBAAgB,WAAW;AAC3B,eAAW,MAAM;AAAA,EACnB;AACF,CAAC;AAED,gBAAgB,iBAAiB,SAAS,YAAY;AACpD,QAAM,YAAY,OAAO,SAAS,WAAW,OAAO,EAAE;AACtD,MAAI,CAAC,OAAO,UAAU,SAAS,KAAK,aAAa,KAAK,YAAY,OAAO;AACvE,gBAAY;AACZ,UAAM,QAAQ;AACd;AAAA,EACF;AACA,QAAM,uBAAuB,UAAU,SAAS;AAClD,CAAC;AAED,KAAK,QAAQ;AAEb,eAAe,UAAU;AACvB,QAAM,QAAQ,MAAM,OAAO,QAAQ,YAAY,EAAE,MAAM,uBAAuB,CAAC;AAC/E,QAAM,YAAY,MAAM,aAAa;AACrC,QAAM,eAAe,OAAO,QACxB,MAAM,OAAO,KACV,IAAI,MAAM,KAAK,EACf,MAAM,MAAM,MAAS,IACxB;AAEJ,WAAS,OAAO,WAAW,YAAY;AACzC;AAEA,SAAS,SACP,OAOA,WACA,cACA;AACA,QAAM,EAAE,OAAO,iBAAiB,QAAQ,UAAU,eAAe,eAAe,IAAI;AAEpF,QAAM,cAAc,WAAW,MAAM;AACrC,QAAM,sBAAsB,UAAU,QAAQ,UAAU;AAExD,gBAAc,WAAW,CAAC,eAAe,uBAAuB,CAAC,aAAa,WAAW,OAAO,EAAE;AAClG,mBAAiB,WAAW,UAAU;AACtC,gBAAc,WAAW,UAAU;AAEnC,iBAAe,QAAQ;AACvB,kBAAgB,SAAS,aAAa;AACtC,aAAW,WAAW,aAAa;AACnC,QAAM,qBAAqB,iBAAiB;AAC5C,kBAAgB,WAAW,aAAa;AACxC,aAAW,QAAQ,OAAO,MAAM;AAEhC,MAAI,SAAS,cAAc;AACzB,UAAM,SAAS,sBAAsB,eAAe;AACpD,mBAAe,cAAc,IAAI,KAAK,GAAG,MAAM;AAC/C,mBAAe,UAAU,OAAO,OAAO;AAAA,EACzC,OAAO;AACL,mBAAe,cAAc;AAC7B,mBAAe,UAAU,IAAI,OAAO;AAAA,EACtC;AAEA,QAAM,YAAY,aAAa,SAAS,SAAS;AACjD,MAAI,iBAAiB,cAAc;AACjC,mBAAe,cAAc,kBAAkB,MAAM,KAAK,SAAS;AACnE,mBAAe,UAAU,IAAI,OAAO;AAAA,EACtC,WAAW,iBAAiB;AAC1B,mBAAe,cAAc,kBAAkB,MAAM,KAAK,SAAS;AACnE,mBAAe,UAAU,OAAO,OAAO;AAAA,EACzC,OAAO;AACL,mBAAe,cAAc,kBAAkB,MAAM,KAAK,SAAS;AACnE,mBAAe,UAAU,IAAI,OAAO;AAAA,EACtC;AAEA,WAAS,UAAU,OAAO,OAAO;AACjC,MAAI,WAAW;AACb,aAAS,cAAc;AACvB,aAAS,UAAU,IAAI,OAAO;AAAA,EAChC,WAAW,iBAAiB,cAAc;AACxC,aAAS,cAAc,gCAAgC,MAAM;AAAA,EAC/D,WAAW,SAAS,CAAC,qBAAqB;AACxC,aAAS,cAAc;AAAA,EACzB,OAAO;AACL,aAAS,cAAc,QAAQ,cAAc;AAC7C,QAAI,CAAC,OAAO;AACV,eAAS,UAAU,IAAI,OAAO;AAAA,IAChC;AAAA,EACF;AAEA,MAAI,cAAc;AAChB,qBAAiB,SAAS;AAC1B,WAAO,cAAc,SAAS,aAAa,SAAS,UAAU;AAC9D,UAAM,OAAO,aAAa,OAAO;AACjC,QAAI,MAAM;AACR,YAAM,cAAc,SAAS,MAAM,EAAE;AACrC,YAAM,OAAO;AACb,YAAM,SAAS;AAAA,IACjB,OAAO;AACL,YAAM,cAAc;AACpB,YAAM,gBAAgB,MAAM;AAC5B,YAAM,SAAS;AAAA,IACjB;AAAA,EACF,OAAO;AACL,qBAAiB,SAAS;AAC1B,WAAO,cAAc;AACrB,UAAM,cAAc;AACpB,UAAM,gBAAgB,MAAM;AAC5B,UAAM,SAAS;AAAA,EACjB;AAEA,SAAO,SAAS;AAClB;AAEA,eAAe,eAAqD;AAClE,QAAM,OAAO,MAAM,OAAO,KAAK,MAAM,EAAE,QAAQ,MAAM,eAAe,KAAK,CAAC;AAC1E,SAAO,KAAK,CAAC;AACf;AAEA,eAAe,uBAAuB,MAAgB,MAA8B;AAClF,cAAY;AACZ,cAAY,IAAI;AAChB,MAAI;AACF,UAAM,WAAW,MAAM,OAAO,QAAQ,YAAY;AAAA,MAChD,MAAM;AAAA,MACN;AAAA,MACA;AAAA,IACF,CAAC;AACD,QAAI,CAAC,UAAU,IAAI;AACjB,YAAM,IAAI,MAAM,UAAU,SAAS,qCAAqC;AAAA,IAC1E;AACA,UAAM,wBAAwB;AAAA,EAChC,SAAS,OAAO;AACd,gBAAY,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAAA,EACnE,UAAE;AACA,gBAAY,KAAK;AACjB,UAAM,QAAQ;AAAA,EAChB;AACF;AAEA,eAAe,wBAAwB,YAAY,KAAqB;AACtE,QAAM,QAAQ,KAAK,IAAI;AACvB,MAAI,aAAa;AACjB,SAAO,KAAK,IAAI,IAAI,QAAQ,WAAW;AACrC,UAAM,QAAQ,MAAM,OAAO,QAAQ,YAAY,EAAE,MAAM,uBAAuB,CAAC;AAC/E,UAAM,YAAY,MAAM,aAAa;AACrC,UAAM,eAAe,OAAO,QACxB,MAAM,OAAO,KACV,IAAI,MAAM,KAAK,EACf,MAAM,MAAM,MAAS,IACxB;AACJ,QAAI,OAAO;AACT,eAAS,OAAO,WAAW,YAAY;AAAA,IACzC;AACA,QAAI,OAAO,mBAAmB,OAAO,iBAAiB,QAAQ;AAC5D;AAAA,IACF;AAEA,UAAM,UAAU,aAAa,KAAK,KAAK,aAAa,KAAK,MAAM;AAC/D;AACA,UAAM,MAAM,OAAO;AAAA,EACrB;AACF;AAEA,cAAc,iBAAiB,SAAS,YAAY;AAClD,QAAM,QAAQ,MAAM,OAAO,QAAQ,YAAY,EAAE,MAAM,uBAAuB,CAAC;AAC/E,MAAI,CAAC,OAAO,OAAO;AACjB;AAAA,EACF;AACA,MAAI;AACF,UAAM,OAAO,KAAK,OAAO,MAAM,OAAO,EAAE,QAAQ,KAAK,CAAC;AACtD,UAAM,MAAM,MAAM,OAAO,KAAK,IAAI,MAAM,KAAK;AAC7C,QAAI,IAAI,aAAa,QAAW;AAC9B,YAAM,OAAO,QAAQ,OAAO,IAAI,UAAU,EAAE,SAAS,KAAK,CAAC;AAAA,IAC7D;AAAA,EACF,SAAS,OAAO;AACd,gBAAY,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AACjE,UAAM,QAAQ;AAAA,EAChB;AACF,CAAC;AAED,SAAS,aAAa,KAAsB;AAC1C,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AACA,MAAI,IAAI,WAAW,WAAW,KAAK,IAAI,WAAW,qBAAqB,GAAG;AACxE,WAAO;AAAA,EACT;AACA,MAAI,IAAI,WAAW,SAAS,KAAK,IAAI,WAAW,QAAQ,GAAG;AACzD,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAKA,SAAS,SAAS,OAAe,MAAM,IAAY;AACjD,MAAI,MAAM,UAAU,KAAK;AACvB,WAAO;AAAA,EACT;AACA,SAAO,GAAG,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC;AACnC;AAEA,SAAS,MAAM,IAA2B;AACxC,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,eAAW,SAAS,EAAE;AAAA,EACxB,CAAC;AACH;AAEA,SAAS,YAAY,MAAqB;AACxC,MAAI,MAAM;AACR,gBAAY,SAAS;AACrB,mBAAe,SAAS;AACxB,oBAAgB,WAAW;AAAA,EAC7B,OAAO;AACL,gBAAY,SAAS;AACrB,mBAAe,SAAS;AACxB,oBAAgB,WAAW;AAAA,EAC7B;AACF;","names":[]}